{"version":3,"file":"useConsoleAdapter.js","sourceRoot":"","sources":["../../src/adapters/useConsoleAdapter.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAElC,MAAM,UAAU,iBAAiB,CAAC,MAAmC;IACnE,MAAM,kBAAkB,GAAG,OAAO,CAAC,GAAG,CAAC;IACvC,MAAM,mBAAmB,GAAG,OAAO,CAAC,IAAI,CAAC;IACzC,MAAM,oBAAoB,GAAG,OAAO,CAAC,KAAK,CAAC;IAE3C,SAAS,CAAC,GAAG,EAAE;QACb,KAAK,UAAU,KAAK;YAClB,OAAO,CAAC,GAAG,GAAG,UAAU,GAAG,IAAI;gBAC7B,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;gBACnE,MAAM,EAAE,WAAW,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;gBACpC,kBAAkB,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YAC/C,CAAC,CAAC;YACF,OAAO,CAAC,IAAI,GAAG,UAAU,GAAG,IAAI;gBAC9B,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;gBACnE,MAAM,EAAE,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;gBACrC,mBAAmB,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YAChD,CAAC,CAAC;YACF,OAAO,CAAC,KAAK,GAAG,UAAU,GAAG,IAAI;gBAC/B,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;gBACnE,MAAM,EAAE,WAAW,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;gBACtC,oBAAoB,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YACjD,CAAC,CAAC;QACJ,CAAC;QAED,KAAK,UAAU,QAAQ;YACrB,OAAO,CAAC,GAAG,GAAG,kBAAkB,CAAC;YACjC,OAAO,CAAC,IAAI,GAAG,mBAAmB,CAAC;YACnC,OAAO,CAAC,KAAK,GAAG,oBAAoB,CAAC;QACvC,CAAC;QAED,KAAK,EAAE,CAAC;QACR,OAAO,GAAG,EAAE;YACV,QAAQ,EAAE,CAAC;QACb,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;AACf,CAAC","sourcesContent":["import { DevToolsPluginClient } from 'expo/devtools';\nimport { useEffect } from 'react';\n\nexport function useConsoleAdapter(client: DevToolsPluginClient | null) {\n  const originalConsoleLog = console.log;\n  const originalConsoleWarn = console.warn;\n  const originalConsoleError = console.error;\n\n  useEffect(() => {\n    async function setup() {\n      console.log = function (...args) {\n        const payload = args.length === 1 ? args[0] : JSON.stringify(args);\n        client?.sendMessage('log', payload);\n        originalConsoleLog.apply(console, arguments);\n      };\n      console.warn = function (...args) {\n        const payload = args.length === 1 ? args[0] : JSON.stringify(args);\n        client?.sendMessage('warn', payload);\n        originalConsoleWarn.apply(console, arguments);\n      };\n      console.error = function (...args) {\n        const payload = args.length === 1 ? args[0] : JSON.stringify(args);\n        client?.sendMessage('error', payload);\n        originalConsoleError.apply(console, arguments);\n      };\n    }\n\n    async function teardown() {\n      console.log = originalConsoleLog;\n      console.warn = originalConsoleWarn;\n      console.error = originalConsoleError;\n    }\n\n    setup();\n    return () => {\n      teardown();\n    };\n  }, [client]);\n}\n"]}