diff --git a/node_modules/expo-modules-autolinking/build/autolinking/extraDependencies.d.ts b/node_modules/expo-modules-autolinking/build/autolinking/extraDependencies.d.ts
index fe041dd..97551a2 100644
--- a/node_modules/expo-modules-autolinking/build/autolinking/extraDependencies.d.ts
+++ b/node_modules/expo-modules-autolinking/build/autolinking/extraDependencies.d.ts
@@ -22,9 +22,9 @@ interface ExtraDependencies {
 /**
  * Gets the `expo-build-properties` settings from the app config.
  */
-export declare function getBuildPropertiesAsync(): Promise<Record<string, any>>;
+export declare function getBuildPropertiesAsync(projectRoot: string): Promise<Record<string, any>>;
 /**
  * Resolves the extra dependencies from `expo-build-properties` settings.
  */
-export declare function resolveExtraDependenciesAsync(): Promise<Partial<ExtraDependencies>>;
+export declare function resolveExtraDependenciesAsync(projectRoot: string): Promise<Partial<ExtraDependencies>>;
 export {};
diff --git a/node_modules/expo-modules-autolinking/build/autolinking/extraDependencies.js b/node_modules/expo-modules-autolinking/build/autolinking/extraDependencies.js
index b694680..29abd18 100644
--- a/node_modules/expo-modules-autolinking/build/autolinking/extraDependencies.js
+++ b/node_modules/expo-modules-autolinking/build/autolinking/extraDependencies.js
@@ -10,9 +10,9 @@ const mergeLinkingOptions_1 = require("./mergeLinkingOptions");
 /**
  * Gets the `expo-build-properties` settings from the app config.
  */
-async function getBuildPropertiesAsync() {
-    const projectRoot = path_1.default.dirname(mergeLinkingOptions_1.projectPackageJsonPath);
-    const { exp: config } = await (0, config_1.getConfig)(projectRoot, { skipSDKVersionRequirement: true });
+async function getBuildPropertiesAsync(projectRoot) {
+    const projectPackageRoot = path_1.default.dirname(await (0, mergeLinkingOptions_1.getProjectPackageJsonPathAsync)(projectRoot));
+    const { exp: config } = await (0, config_1.getConfig)(projectPackageRoot, { skipSDKVersionRequirement: true });
     const buildPropertiesPlugin = config.plugins?.find((item) => item[0] === 'expo-build-properties')?.[1];
     return buildPropertiesPlugin ?? {};
 }
@@ -20,8 +20,8 @@ exports.getBuildPropertiesAsync = getBuildPropertiesAsync;
 /**
  * Resolves the extra dependencies from `expo-build-properties` settings.
  */
-async function resolveExtraDependenciesAsync() {
-    const buildProps = await getBuildPropertiesAsync();
+async function resolveExtraDependenciesAsync(projectRoot) {
+    const buildProps = await getBuildPropertiesAsync(projectRoot);
     return {
         androidMavenRepos: buildProps.android?.extraMavenRepos ?? [],
         iosPods: buildProps.ios?.extraPods ?? {},
diff --git a/node_modules/expo-modules-autolinking/build/autolinking/findModules.js b/node_modules/expo-modules-autolinking/build/autolinking/findModules.js
index 8468bb8..c78e956 100644
--- a/node_modules/expo-modules-autolinking/build/autolinking/findModules.js
+++ b/node_modules/expo-modules-autolinking/build/autolinking/findModules.js
@@ -56,10 +56,10 @@ async function findModulesAsync(providedOptions) {
     // (excluding custom native modules path)
     // Workspace root usually doesn't specify all its dependencies (see Expo Go),
     // so in this case we should link everything.
-    if (options.searchPaths.length <= 1) {
+    if (options.searchPaths.length <= 1 || options.onlyProjectDeps === false) {
         return searchResults;
     }
-    return filterToProjectDependencies(searchResults, {
+    return await filterToProjectDependenciesAsync(searchResults, {
         ...providedOptions,
         // Custom native modules are not filtered out
         // when they're not specified in package.json dependencies.
@@ -148,7 +148,7 @@ function resolvePackageNameAndVersion(packagePath, { fallbackToDirName } = {}) {
 /**
  * Filters out packages that are not the dependencies of the project.
  */
-function filterToProjectDependencies(results, options = {}) {
+async function filterToProjectDependenciesAsync(results, options) {
     const filteredResults = {};
     const visitedPackages = new Set();
     // iterate through always included package names and add them to the visited packages
@@ -201,7 +201,8 @@ function filterToProjectDependencies(results, options = {}) {
         }
     }
     // Visit project's package.
-    visitPackage(mergeLinkingOptions_1.projectPackageJsonPath);
+    const projectPackageJsonPath = await (0, mergeLinkingOptions_1.getProjectPackageJsonPathAsync)(options.projectRoot);
+    visitPackage(projectPackageJsonPath);
     return filteredResults;
 }
 //# sourceMappingURL=findModules.js.map
\ No newline at end of file
diff --git a/node_modules/expo-modules-autolinking/build/autolinking/index.d.ts b/node_modules/expo-modules-autolinking/build/autolinking/index.d.ts
index 6e31064..f1cffec 100644
--- a/node_modules/expo-modules-autolinking/build/autolinking/index.d.ts
+++ b/node_modules/expo-modules-autolinking/build/autolinking/index.d.ts
@@ -1,5 +1,12 @@
-export { findModulesAsync, } from './findModules';
-export { resolveSearchPathsAsync, mergeLinkingOptionsAsync, } from './mergeLinkingOptions';
+import { findModulesAsync } from './findModules';
+import { mergeLinkingOptionsAsync, resolveSearchPathsAsync } from './mergeLinkingOptions';
+import { resolveModulesAsync } from './resolveModules';
+import type { ModuleDescriptor, SearchOptions } from '../types';
+export { findModulesAsync, mergeLinkingOptionsAsync, resolveModulesAsync, resolveSearchPathsAsync };
 export { generatePackageListAsync } from './generatePackageList';
-export { resolveModulesAsync } from './resolveModules';
 export { verifySearchResults } from './verifySearchResults';
+export * from '../types';
+/**
+ * Programmatic API to query autolinked modules for a project.
+ */
+export declare function queryAutolinkingModulesFromProjectAsync(projectRoot: string, options: Pick<SearchOptions, 'platform' | 'exclude' | 'onlyProjectDeps'>): Promise<ModuleDescriptor[]>;
diff --git a/node_modules/expo-modules-autolinking/build/autolinking/index.js b/node_modules/expo-modules-autolinking/build/autolinking/index.js
index 768dc8e..172cd47 100644
--- a/node_modules/expo-modules-autolinking/build/autolinking/index.js
+++ b/node_modules/expo-modules-autolinking/build/autolinking/index.js
@@ -1,17 +1,40 @@
 "use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __exportStar = (this && this.__exportStar) || function(m, exports) {
+    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
+};
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.verifySearchResults = exports.resolveModulesAsync = exports.generatePackageListAsync = exports.mergeLinkingOptionsAsync = exports.resolveSearchPathsAsync = exports.findModulesAsync = void 0;
-var findModules_1 = require("./findModules");
-// NOTE(evanbacon): Used in @expo/prebuild-config
+exports.queryAutolinkingModulesFromProjectAsync = exports.verifySearchResults = exports.generatePackageListAsync = exports.resolveSearchPathsAsync = exports.resolveModulesAsync = exports.mergeLinkingOptionsAsync = exports.findModulesAsync = void 0;
+const findModules_1 = require("./findModules");
 Object.defineProperty(exports, "findModulesAsync", { enumerable: true, get: function () { return findModules_1.findModulesAsync; } });
-var mergeLinkingOptions_1 = require("./mergeLinkingOptions");
-// NOTE(evanbacon): Used in @expo/prebuild-config
-Object.defineProperty(exports, "resolveSearchPathsAsync", { enumerable: true, get: function () { return mergeLinkingOptions_1.resolveSearchPathsAsync; } });
+const mergeLinkingOptions_1 = require("./mergeLinkingOptions");
 Object.defineProperty(exports, "mergeLinkingOptionsAsync", { enumerable: true, get: function () { return mergeLinkingOptions_1.mergeLinkingOptionsAsync; } });
+Object.defineProperty(exports, "resolveSearchPathsAsync", { enumerable: true, get: function () { return mergeLinkingOptions_1.resolveSearchPathsAsync; } });
+const resolveModules_1 = require("./resolveModules");
+Object.defineProperty(exports, "resolveModulesAsync", { enumerable: true, get: function () { return resolveModules_1.resolveModulesAsync; } });
 var generatePackageList_1 = require("./generatePackageList");
 Object.defineProperty(exports, "generatePackageListAsync", { enumerable: true, get: function () { return generatePackageList_1.generatePackageListAsync; } });
-var resolveModules_1 = require("./resolveModules");
-Object.defineProperty(exports, "resolveModulesAsync", { enumerable: true, get: function () { return resolveModules_1.resolveModulesAsync; } });
 var verifySearchResults_1 = require("./verifySearchResults");
 Object.defineProperty(exports, "verifySearchResults", { enumerable: true, get: function () { return verifySearchResults_1.verifySearchResults; } });
+__exportStar(require("../types"), exports);
+/**
+ * Programmatic API to query autolinked modules for a project.
+ */
+async function queryAutolinkingModulesFromProjectAsync(projectRoot, options) {
+    const searchPaths = await (0, mergeLinkingOptions_1.resolveSearchPathsAsync)(null, projectRoot);
+    const linkOptions = await (0, mergeLinkingOptions_1.mergeLinkingOptionsAsync)({ ...options, projectRoot, searchPaths });
+    const searchResults = await (0, findModules_1.findModulesAsync)(linkOptions);
+    return await (0, resolveModules_1.resolveModulesAsync)(searchResults, linkOptions);
+}
+exports.queryAutolinkingModulesFromProjectAsync = queryAutolinkingModulesFromProjectAsync;
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/expo-modules-autolinking/build/autolinking/mergeLinkingOptions.d.ts b/node_modules/expo-modules-autolinking/build/autolinking/mergeLinkingOptions.d.ts
index 7952995..0e0079a 100644
--- a/node_modules/expo-modules-autolinking/build/autolinking/mergeLinkingOptions.d.ts
+++ b/node_modules/expo-modules-autolinking/build/autolinking/mergeLinkingOptions.d.ts
@@ -1,8 +1,8 @@
 import { SearchOptions } from '../types';
 /**
- * Path to the `package.json` of the closest project in the current working dir.
+ * Find the path to the `package.json` of the closest project in the given project root.
  */
-export declare const projectPackageJsonPath: string;
+export declare function getProjectPackageJsonPathAsync(projectRoot: string): Promise<string>;
 /**
  * Merges autolinking options from different sources (the later the higher priority)
  * - options defined in package.json's `expo.autolinking` field
diff --git a/node_modules/expo-modules-autolinking/build/autolinking/mergeLinkingOptions.js b/node_modules/expo-modules-autolinking/build/autolinking/mergeLinkingOptions.js
index ea57f10..f617989 100644
--- a/node_modules/expo-modules-autolinking/build/autolinking/mergeLinkingOptions.js
+++ b/node_modules/expo-modules-autolinking/build/autolinking/mergeLinkingOptions.js
@@ -3,18 +3,21 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.resolveSearchPathsAsync = exports.mergeLinkingOptionsAsync = exports.projectPackageJsonPath = void 0;
+exports.resolveSearchPathsAsync = exports.mergeLinkingOptionsAsync = exports.getProjectPackageJsonPathAsync = void 0;
 const find_up_1 = __importDefault(require("find-up"));
 const fs_extra_1 = __importDefault(require("fs-extra"));
 const path_1 = __importDefault(require("path"));
 /**
- * Path to the `package.json` of the closest project in the current working dir.
+ * Find the path to the `package.json` of the closest project in the given project root.
  */
-exports.projectPackageJsonPath = find_up_1.default.sync('package.json', { cwd: process.cwd() });
-// This won't happen in usual scenarios, but we need to unwrap the optional path :)
-if (!exports.projectPackageJsonPath) {
-    throw new Error(`Couldn't find "package.json" up from path "${process.cwd()}"`);
+async function getProjectPackageJsonPathAsync(projectRoot) {
+    const result = await (0, find_up_1.default)('package.json', { cwd: projectRoot });
+    if (!result) {
+        throw new Error(`Couldn't find "package.json" up from path "${projectRoot}"`);
+    }
+    return result;
 }
+exports.getProjectPackageJsonPathAsync = getProjectPackageJsonPathAsync;
 /**
  * Merges autolinking options from different sources (the later the higher priority)
  * - options defined in package.json's `expo.autolinking` field
@@ -22,13 +25,13 @@ if (!exports.projectPackageJsonPath) {
  * - options provided to the CLI command
  */
 async function mergeLinkingOptionsAsync(providedOptions) {
-    const packageJson = require(exports.projectPackageJsonPath);
+    const packageJson = require(await getProjectPackageJsonPathAsync(providedOptions.projectRoot));
     const baseOptions = packageJson.expo?.autolinking;
     const platformOptions = providedOptions.platform && baseOptions?.[providedOptions.platform];
     const finalOptions = Object.assign({}, baseOptions, platformOptions, providedOptions);
     // Makes provided paths absolute or falls back to default paths if none was provided.
-    finalOptions.searchPaths = await resolveSearchPathsAsync(finalOptions.searchPaths, process.cwd());
-    finalOptions.nativeModulesDir = await resolveNativeModulesDirAsync(finalOptions.nativeModulesDir, process.cwd());
+    finalOptions.searchPaths = await resolveSearchPathsAsync(finalOptions.searchPaths, providedOptions.projectRoot);
+    finalOptions.nativeModulesDir = await resolveNativeModulesDirAsync(finalOptions.nativeModulesDir, providedOptions.projectRoot);
     return finalOptions;
 }
 exports.mergeLinkingOptionsAsync = mergeLinkingOptionsAsync;
diff --git a/node_modules/expo-modules-autolinking/build/autolinking/verifySearchResults.d.ts b/node_modules/expo-modules-autolinking/build/autolinking/verifySearchResults.d.ts
index fa3223a..e8931a2 100644
--- a/node_modules/expo-modules-autolinking/build/autolinking/verifySearchResults.d.ts
+++ b/node_modules/expo-modules-autolinking/build/autolinking/verifySearchResults.d.ts
@@ -1,5 +1,5 @@
-import { SearchResults } from '../types';
+import { SearchOptions, SearchResults } from '../types';
 /**
  * Verifies the search results by checking whether there are no duplicates.
  */
-export declare function verifySearchResults(searchResults: SearchResults): number;
+export declare function verifySearchResults(searchResults: SearchResults, options: SearchOptions): number;
diff --git a/node_modules/expo-modules-autolinking/build/autolinking/verifySearchResults.js b/node_modules/expo-modules-autolinking/build/autolinking/verifySearchResults.js
index 8660259..e9a74ba 100644
--- a/node_modules/expo-modules-autolinking/build/autolinking/verifySearchResults.js
+++ b/node_modules/expo-modules-autolinking/build/autolinking/verifySearchResults.js
@@ -9,9 +9,8 @@ const path_1 = __importDefault(require("path"));
 /**
  * Verifies the search results by checking whether there are no duplicates.
  */
-function verifySearchResults(searchResults) {
-    const cwd = process.cwd();
-    const relativePath = (pkg) => path_1.default.relative(cwd, pkg.path);
+function verifySearchResults(searchResults, options) {
+    const relativePath = (pkg) => path_1.default.relative(options.projectRoot, pkg.path);
     let counter = 0;
     for (const moduleName in searchResults) {
         const revision = searchResults[moduleName];
diff --git a/node_modules/expo-modules-autolinking/build/index.js b/node_modules/expo-modules-autolinking/build/index.js
index afa28b1..03fc5bc 100644
--- a/node_modules/expo-modules-autolinking/build/index.js
+++ b/node_modules/expo-modules-autolinking/build/index.js
@@ -17,6 +17,9 @@ function registerSearchCommand(commandName, fn) {
         .option('-e, --exclude <exclude...>', 'Package names to exclude when looking up for modules.', (value, previous) => (previous ?? []).concat(value))
         .option('-p, --platform [platform]', 'The platform that the resulting modules must support. Available options: "ios", "android"', 'ios')
         .option('--silent', 'Silence resolution warnings')
+        .addOption(new commander_1.default.Option('--project-root <projectRoot>', 'The path to the root of the project').default(process.cwd(), 'process.cwd()'))
+        .option('--only-project-deps', 'For a monorepo, include all modules even if they are not in the project dependencies.', true)
+        .option('--no-only-project-deps', 'Opposite of --only-project-deps', false)
         .action(async (searchPaths, providedOptions) => {
         const options = await (0, autolinking_1.mergeLinkingOptionsAsync)({
             ...providedOptions,
@@ -51,8 +54,8 @@ module.exports = async function (args) {
         }
     }).option('-j, --json', 'Output results in the plain JSON format.', () => true, false);
     // Checks whether there are no resolving issues in the current setup.
-    registerSearchCommand('verify', (results) => {
-        const numberOfDuplicates = (0, autolinking_1.verifySearchResults)(results);
+    registerSearchCommand('verify', (results, options) => {
+        const numberOfDuplicates = (0, autolinking_1.verifySearchResults)(results, options);
         if (!numberOfDuplicates) {
             console.log('✅ Everything is fine!');
         }
@@ -60,7 +63,7 @@ module.exports = async function (args) {
     // Searches for available expo modules and resolves the results for given platform.
     registerResolveCommand('resolve', async (results, options) => {
         const modules = await (0, autolinking_1.resolveModulesAsync)(results, options);
-        const extraDependencies = await (0, extraDependencies_1.resolveExtraDependenciesAsync)();
+        const extraDependencies = await (0, extraDependencies_1.resolveExtraDependenciesAsync)(options.projectRoot);
         if (options.json) {
             console.log(JSON.stringify({ extraDependencies, modules }));
         }
diff --git a/node_modules/expo-modules-autolinking/build/platforms/devtools.d.ts b/node_modules/expo-modules-autolinking/build/platforms/devtools.d.ts
new file mode 100644
index 0000000..61cbf34
--- /dev/null
+++ b/node_modules/expo-modules-autolinking/build/platforms/devtools.d.ts
@@ -0,0 +1,2 @@
+import { ModuleDescriptorDevTools, PackageRevision } from '../types';
+export declare function resolveModuleAsync(packageName: string, revision: PackageRevision): Promise<ModuleDescriptorDevTools | null>;
diff --git a/node_modules/expo-modules-autolinking/build/platforms/devtools.js b/node_modules/expo-modules-autolinking/build/platforms/devtools.js
new file mode 100644
index 0000000..68bcb4e
--- /dev/null
+++ b/node_modules/expo-modules-autolinking/build/platforms/devtools.js
@@ -0,0 +1,20 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.resolveModuleAsync = void 0;
+const path_1 = __importDefault(require("path"));
+async function resolveModuleAsync(packageName, revision) {
+    const devtoolsConfig = revision.config?.toJSON().devtools;
+    if (devtoolsConfig == null) {
+        return null;
+    }
+    return {
+        packageName,
+        packageRoot: revision.path,
+        webpageRoot: path_1.default.join(revision.path, devtoolsConfig.webpageRoot),
+    };
+}
+exports.resolveModuleAsync = resolveModuleAsync;
+//# sourceMappingURL=devtools.js.map
\ No newline at end of file
diff --git a/node_modules/expo-modules-autolinking/build/types.d.ts b/node_modules/expo-modules-autolinking/build/types.d.ts
index 2ce78e2..734175d 100644
--- a/node_modules/expo-modules-autolinking/build/types.d.ts
+++ b/node_modules/expo-modules-autolinking/build/types.d.ts
@@ -1,5 +1,5 @@
 import { ExpoModuleConfig } from './ExpoModuleConfig';
-export type SupportedPlatform = 'ios' | 'android' | 'web';
+export type SupportedPlatform = 'ios' | 'android' | 'web' | 'devtools';
 export interface SearchOptions {
     searchPaths: string[];
     ignorePaths?: string[] | null;
@@ -7,6 +7,13 @@ export interface SearchOptions {
     platform: SupportedPlatform;
     silent?: boolean;
     nativeModulesDir?: string | null;
+    projectRoot: string;
+    /**
+     * Filter the search results to only include the project dependencies.
+     * In a monorepo, you may like to set this to false and link all modules from the monorepo.
+     * @default true
+     */
+    onlyProjectDeps?: boolean;
     flags?: Record<string, any>;
 }
 export interface ResolveOptions extends SearchOptions {
@@ -58,7 +65,12 @@ export interface ModuleDescriptorIos {
     reactDelegateHandlers: string[];
     debugOnly: boolean;
 }
-export type ModuleDescriptor = ModuleDescriptorAndroid | ModuleDescriptorIos;
+export interface ModuleDescriptorDevTools {
+    packageName: string;
+    packageRoot: string;
+    webpageRoot: string;
+}
+export type ModuleDescriptor = ModuleDescriptorAndroid | ModuleDescriptorIos | ModuleDescriptorDevTools;
 export interface AndroidGradlePluginDescriptor {
     /**
      * Gradle plugin ID
@@ -141,4 +153,13 @@ export interface RawExpoModuleConfig {
          */
         gradlePlugins?: AndroidGradlePluginDescriptor[];
     };
+    /**
+     * DevTools-specific config.
+     */
+    devtools?: {
+        /**
+         * The webpage root directory for Expo CLI DevTools to serve the web resources.
+         */
+        webpageRoot: string;
+    };
 }
diff --git a/node_modules/expo-modules-autolinking/exports.d.ts b/node_modules/expo-modules-autolinking/exports.d.ts
new file mode 100644
index 0000000..e6aaf0c
--- /dev/null
+++ b/node_modules/expo-modules-autolinking/exports.d.ts
@@ -0,0 +1 @@
+export * from './build/autolinking';
diff --git a/node_modules/expo-modules-autolinking/exports.js b/node_modules/expo-modules-autolinking/exports.js
new file mode 100644
index 0000000..9b5fc1a
--- /dev/null
+++ b/node_modules/expo-modules-autolinking/exports.js
@@ -0,0 +1 @@
+module.exports = require('./build/autolinking');
diff --git a/node_modules/expo-modules-autolinking/src/autolinking/extraDependencies.ts b/node_modules/expo-modules-autolinking/src/autolinking/extraDependencies.ts
index 7d265a9..58416fe 100644
--- a/node_modules/expo-modules-autolinking/src/autolinking/extraDependencies.ts
+++ b/node_modules/expo-modules-autolinking/src/autolinking/extraDependencies.ts
@@ -1,7 +1,7 @@
 import { getConfig } from '@expo/config';
 import path from 'path';
 
-import { projectPackageJsonPath } from './mergeLinkingOptions';
+import { getProjectPackageJsonPathAsync } from './mergeLinkingOptions';
 
 interface AndroidMavenRepository {
   url: string;
@@ -30,9 +30,9 @@ interface ExtraDependencies {
 /**
  * Gets the `expo-build-properties` settings from the app config.
  */
-export async function getBuildPropertiesAsync(): Promise<Record<string, any>> {
-  const projectRoot = path.dirname(projectPackageJsonPath);
-  const { exp: config } = await getConfig(projectRoot, { skipSDKVersionRequirement: true });
+export async function getBuildPropertiesAsync(projectRoot: string): Promise<Record<string, any>> {
+  const projectPackageRoot = path.dirname(await getProjectPackageJsonPathAsync(projectRoot));
+  const { exp: config } = await getConfig(projectPackageRoot, { skipSDKVersionRequirement: true });
   const buildPropertiesPlugin = config.plugins?.find(
     (item) => item[0] === 'expo-build-properties'
   )?.[1];
@@ -42,8 +42,10 @@ export async function getBuildPropertiesAsync(): Promise<Record<string, any>> {
 /**
  * Resolves the extra dependencies from `expo-build-properties` settings.
  */
-export async function resolveExtraDependenciesAsync(): Promise<Partial<ExtraDependencies>> {
-  const buildProps = await getBuildPropertiesAsync();
+export async function resolveExtraDependenciesAsync(
+  projectRoot: string
+): Promise<Partial<ExtraDependencies>> {
+  const buildProps = await getBuildPropertiesAsync(projectRoot);
   return {
     androidMavenRepos: buildProps.android?.extraMavenRepos ?? [],
     iosPods: buildProps.ios?.extraPods ?? {},
diff --git a/node_modules/expo-modules-autolinking/src/autolinking/findModules.ts b/node_modules/expo-modules-autolinking/src/autolinking/findModules.ts
index 7b86a14..ebf7fdc 100644
--- a/node_modules/expo-modules-autolinking/src/autolinking/findModules.ts
+++ b/node_modules/expo-modules-autolinking/src/autolinking/findModules.ts
@@ -6,7 +6,7 @@ import path from 'path';
 
 import { requireAndResolveExpoModuleConfig } from '../ExpoModuleConfig';
 import { PackageRevision, SearchOptions, SearchResults } from '../types';
-import { mergeLinkingOptionsAsync, projectPackageJsonPath } from './mergeLinkingOptions';
+import { getProjectPackageJsonPathAsync, mergeLinkingOptionsAsync } from './mergeLinkingOptions';
 
 // Names of the config files. From lowest to highest priority.
 const EXPO_MODULE_CONFIG_FILENAMES = ['unimodule.json', 'expo-module.config.json'];
@@ -70,11 +70,11 @@ export async function findModulesAsync(providedOptions: SearchOptions): Promise<
   // (excluding custom native modules path)
   // Workspace root usually doesn't specify all its dependencies (see Expo Go),
   // so in this case we should link everything.
-  if (options.searchPaths.length <= 1) {
+  if (options.searchPaths.length <= 1 || options.onlyProjectDeps === false) {
     return searchResults;
   }
 
-  return filterToProjectDependencies(searchResults, {
+  return await filterToProjectDependenciesAsync(searchResults, {
     ...providedOptions,
     // Custom native modules are not filtered out
     // when they're not specified in package.json dependencies.
@@ -180,10 +180,12 @@ function resolvePackageNameAndVersion(
 /**
  * Filters out packages that are not the dependencies of the project.
  */
-function filterToProjectDependencies(
+async function filterToProjectDependenciesAsync(
   results: SearchResults,
-  options: Pick<SearchOptions, 'silent'> & { alwaysIncludedPackagesNames?: Set<string> } = {}
-) {
+  options: Pick<SearchOptions, 'projectRoot' | 'silent'> & {
+    alwaysIncludedPackagesNames?: Set<string>;
+  }
+): Promise<SearchResults> {
   const filteredResults: SearchResults = {};
   const visitedPackages = new Set<string>();
 
@@ -244,6 +246,7 @@ function filterToProjectDependencies(
   }
 
   // Visit project's package.
+  const projectPackageJsonPath = await getProjectPackageJsonPathAsync(options.projectRoot);
   visitPackage(projectPackageJsonPath);
 
   return filteredResults;
diff --git a/node_modules/expo-modules-autolinking/src/autolinking/index.ts b/node_modules/expo-modules-autolinking/src/autolinking/index.ts
index 3608f20..153c806 100644
--- a/node_modules/expo-modules-autolinking/src/autolinking/index.ts
+++ b/node_modules/expo-modules-autolinking/src/autolinking/index.ts
@@ -1,12 +1,22 @@
-export {
-  // NOTE(evanbacon): Used in @expo/prebuild-config
-  findModulesAsync,
-} from './findModules';
-export {
-  // NOTE(evanbacon): Used in @expo/prebuild-config
-  resolveSearchPathsAsync,
-  mergeLinkingOptionsAsync,
-} from './mergeLinkingOptions';
+import { findModulesAsync } from './findModules';
+import { mergeLinkingOptionsAsync, resolveSearchPathsAsync } from './mergeLinkingOptions';
+import { resolveModulesAsync } from './resolveModules';
+import type { ModuleDescriptor, SearchOptions } from '../types';
+
+export { findModulesAsync, mergeLinkingOptionsAsync, resolveModulesAsync, resolveSearchPathsAsync };
 export { generatePackageListAsync } from './generatePackageList';
-export { resolveModulesAsync } from './resolveModules';
 export { verifySearchResults } from './verifySearchResults';
+export * from '../types';
+
+/**
+ * Programmatic API to query autolinked modules for a project.
+ */
+export async function queryAutolinkingModulesFromProjectAsync(
+  projectRoot: string,
+  options: Pick<SearchOptions, 'platform' | 'exclude' | 'onlyProjectDeps'>
+): Promise<ModuleDescriptor[]> {
+  const searchPaths = await resolveSearchPathsAsync(null, projectRoot);
+  const linkOptions = await mergeLinkingOptionsAsync({ ...options, projectRoot, searchPaths });
+  const searchResults = await findModulesAsync(linkOptions);
+  return await resolveModulesAsync(searchResults, linkOptions);
+}
diff --git a/node_modules/expo-modules-autolinking/src/autolinking/mergeLinkingOptions.ts b/node_modules/expo-modules-autolinking/src/autolinking/mergeLinkingOptions.ts
index 76080dd..10da601 100644
--- a/node_modules/expo-modules-autolinking/src/autolinking/mergeLinkingOptions.ts
+++ b/node_modules/expo-modules-autolinking/src/autolinking/mergeLinkingOptions.ts
@@ -5,13 +5,14 @@ import path from 'path';
 import { SearchOptions } from '../types';
 
 /**
- * Path to the `package.json` of the closest project in the current working dir.
+ * Find the path to the `package.json` of the closest project in the given project root.
  */
-export const projectPackageJsonPath = findUp.sync('package.json', { cwd: process.cwd() }) as string;
-
-// This won't happen in usual scenarios, but we need to unwrap the optional path :)
-if (!projectPackageJsonPath) {
-  throw new Error(`Couldn't find "package.json" up from path "${process.cwd()}"`);
+export async function getProjectPackageJsonPathAsync(projectRoot: string): Promise<string> {
+  const result = await findUp('package.json', { cwd: projectRoot });
+  if (!result) {
+    throw new Error(`Couldn't find "package.json" up from path "${projectRoot}"`);
+  }
+  return result;
 }
 
 /**
@@ -23,7 +24,7 @@ if (!projectPackageJsonPath) {
 export async function mergeLinkingOptionsAsync<OptionsType extends SearchOptions>(
   providedOptions: OptionsType
 ): Promise<OptionsType> {
-  const packageJson = require(projectPackageJsonPath);
+  const packageJson = require(await getProjectPackageJsonPathAsync(providedOptions.projectRoot));
   const baseOptions = packageJson.expo?.autolinking;
   const platformOptions = providedOptions.platform && baseOptions?.[providedOptions.platform];
   const finalOptions = Object.assign(
@@ -34,11 +35,14 @@ export async function mergeLinkingOptionsAsync<OptionsType extends SearchOptions
   ) as OptionsType;
 
   // Makes provided paths absolute or falls back to default paths if none was provided.
-  finalOptions.searchPaths = await resolveSearchPathsAsync(finalOptions.searchPaths, process.cwd());
+  finalOptions.searchPaths = await resolveSearchPathsAsync(
+    finalOptions.searchPaths,
+    providedOptions.projectRoot
+  );
 
   finalOptions.nativeModulesDir = await resolveNativeModulesDirAsync(
     finalOptions.nativeModulesDir,
-    process.cwd()
+    providedOptions.projectRoot
   );
 
   return finalOptions;
diff --git a/node_modules/expo-modules-autolinking/src/autolinking/verifySearchResults.ts b/node_modules/expo-modules-autolinking/src/autolinking/verifySearchResults.ts
index e1e3de8..d2d030f 100644
--- a/node_modules/expo-modules-autolinking/src/autolinking/verifySearchResults.ts
+++ b/node_modules/expo-modules-autolinking/src/autolinking/verifySearchResults.ts
@@ -1,14 +1,14 @@
 import chalk from 'chalk';
 import path from 'path';
 
-import { PackageRevision, SearchResults } from '../types';
+import { PackageRevision, SearchOptions, SearchResults } from '../types';
 
 /**
  * Verifies the search results by checking whether there are no duplicates.
  */
-export function verifySearchResults(searchResults: SearchResults): number {
-  const cwd = process.cwd();
-  const relativePath: (pkg: PackageRevision) => string = (pkg) => path.relative(cwd, pkg.path);
+export function verifySearchResults(searchResults: SearchResults, options: SearchOptions): number {
+  const relativePath: (pkg: PackageRevision) => string = (pkg) =>
+    path.relative(options.projectRoot, pkg.path);
   let counter = 0;
 
   for (const moduleName in searchResults) {
diff --git a/node_modules/expo-modules-autolinking/src/index.ts b/node_modules/expo-modules-autolinking/src/index.ts
index fe35379..cc3d8db 100644
--- a/node_modules/expo-modules-autolinking/src/index.ts
+++ b/node_modules/expo-modules-autolinking/src/index.ts
@@ -36,6 +36,18 @@ function registerSearchCommand<OptionsType extends SearchOptions>(
       'ios'
     )
     .option('--silent', 'Silence resolution warnings')
+    .addOption(
+      new commander.Option(
+        '--project-root <projectRoot>',
+        'The path to the root of the project'
+      ).default(process.cwd(), 'process.cwd()')
+    )
+    .option(
+      '--only-project-deps',
+      'For a monorepo, include all modules even if they are not in the project dependencies.',
+      true
+    )
+    .option('--no-only-project-deps', 'Opposite of --only-project-deps', false)
     .action(async (searchPaths, providedOptions) => {
       const options = await mergeLinkingOptionsAsync<OptionsType>({
         ...providedOptions,
@@ -76,8 +88,8 @@ module.exports = async function (args: string[]) {
   }).option<boolean>('-j, --json', 'Output results in the plain JSON format.', () => true, false);
 
   // Checks whether there are no resolving issues in the current setup.
-  registerSearchCommand('verify', (results) => {
-    const numberOfDuplicates = verifySearchResults(results);
+  registerSearchCommand('verify', (results, options) => {
+    const numberOfDuplicates = verifySearchResults(results, options);
     if (!numberOfDuplicates) {
       console.log('✅ Everything is fine!');
     }
@@ -86,7 +98,7 @@ module.exports = async function (args: string[]) {
   // Searches for available expo modules and resolves the results for given platform.
   registerResolveCommand('resolve', async (results, options) => {
     const modules = await resolveModulesAsync(results, options);
-    const extraDependencies = await resolveExtraDependenciesAsync();
+    const extraDependencies = await resolveExtraDependenciesAsync(options.projectRoot);
 
     if (options.json) {
       console.log(JSON.stringify({ extraDependencies, modules }));
diff --git a/node_modules/expo-modules-autolinking/src/platforms/devtools.ts b/node_modules/expo-modules-autolinking/src/platforms/devtools.ts
new file mode 100644
index 0000000..7dc7acb
--- /dev/null
+++ b/node_modules/expo-modules-autolinking/src/platforms/devtools.ts
@@ -0,0 +1,19 @@
+import path from 'path';
+
+import { ModuleDescriptorDevTools, PackageRevision } from '../types';
+
+export async function resolveModuleAsync(
+  packageName: string,
+  revision: PackageRevision
+): Promise<ModuleDescriptorDevTools | null> {
+  const devtoolsConfig = revision.config?.toJSON().devtools;
+  if (devtoolsConfig == null) {
+    return null;
+  }
+
+  return {
+    packageName,
+    packageRoot: revision.path,
+    webpageRoot: path.join(revision.path, devtoolsConfig.webpageRoot),
+  };
+}
diff --git a/node_modules/expo-modules-autolinking/src/types.ts b/node_modules/expo-modules-autolinking/src/types.ts
index 25f6899..8c931fc 100644
--- a/node_modules/expo-modules-autolinking/src/types.ts
+++ b/node_modules/expo-modules-autolinking/src/types.ts
@@ -1,6 +1,6 @@
 import { ExpoModuleConfig } from './ExpoModuleConfig';
 
-export type SupportedPlatform = 'ios' | 'android' | 'web';
+export type SupportedPlatform = 'ios' | 'android' | 'web' | 'devtools';
 
 export interface SearchOptions {
   // Available in the CLI
@@ -10,6 +10,13 @@ export interface SearchOptions {
   platform: SupportedPlatform;
   silent?: boolean;
   nativeModulesDir?: string | null;
+  projectRoot: string;
+  /**
+   * Filter the search results to only include the project dependencies.
+   * In a monorepo, you may like to set this to false and link all modules from the monorepo.
+   * @default true
+   */
+  onlyProjectDeps?: boolean;
 
   // Scratched from project's config
   flags?: Record<string, any>;
@@ -73,7 +80,16 @@ export interface ModuleDescriptorIos {
   debugOnly: boolean;
 }
 
-export type ModuleDescriptor = ModuleDescriptorAndroid | ModuleDescriptorIos;
+export interface ModuleDescriptorDevTools {
+  packageName: string;
+  packageRoot: string;
+  webpageRoot: string;
+}
+
+export type ModuleDescriptor =
+  | ModuleDescriptorAndroid
+  | ModuleDescriptorIos
+  | ModuleDescriptorDevTools;
 
 export interface AndroidGradlePluginDescriptor {
   /**
@@ -171,4 +187,14 @@ export interface RawExpoModuleConfig {
      */
     gradlePlugins?: AndroidGradlePluginDescriptor[];
   };
+
+  /**
+   * DevTools-specific config.
+   */
+  devtools?: {
+    /**
+     * The webpage root directory for Expo CLI DevTools to serve the web resources.
+     */
+    webpageRoot: string;
+  };
 }
