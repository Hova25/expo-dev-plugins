diff --git a/node_modules/@expo/cli/build/src/export/web/exportWebAsync.js b/node_modules/@expo/cli/build/src/export/web/exportWebAsync.js
index f6419be..4e4322f 100644
--- a/node_modules/@expo/cli/build/src/export/web/exportWebAsync.js
+++ b/node_modules/@expo/cli/build/src/export/web/exportWebAsync.js
@@ -24,7 +24,7 @@ async function exportWebAsync(projectRoot, options) {
     const { exp  } = (0, _config).getConfig(projectRoot);
     const platformBundlers = (0, _platformBundlers).getPlatformBundlers(exp);
     // Create a bundler interface
-    const bundler = new _webpackBundlerDevServer.WebpackBundlerDevServer(projectRoot, platformBundlers, false);
+    const bundler = new _webpackBundlerDevServer.WebpackBundlerDevServer(projectRoot, platformBundlers);
     // If the user set `web.bundler: 'metro'` then they should use `expo export` instead.
     if (!bundler.isTargetingWeb()) {
         throw new _errors.CommandError(_chalk.default`{bold expo export:web} can only be used with Webpack. Use {bold expo export} for other bundlers.`);
diff --git a/node_modules/@expo/cli/build/src/start/interface/interactiveActions.js b/node_modules/@expo/cli/build/src/start/interface/interactiveActions.js
index 9f316d1..0dc438b 100644
--- a/node_modules/@expo/cli/build/src/start/interface/interactiveActions.js
+++ b/node_modules/@expo/cli/build/src/start/interface/interactiveActions.js
@@ -111,9 +111,9 @@ class DevServerManagerActions {
         this.devServerManager.broadcastMessage("reload");
     }
     async openMoreToolsAsync() {
+        // Options match: Chrome > View > Developer
         try {
-            // Options match: Chrome > View > Developer
-            const value = await (0, _prompts).selectAsync(_chalk.default`Dev tools {dim (native only)}`, [
+            const defaultMenuItems = [
                 {
                     title: "Inspect elements",
                     value: "toggleElementInspector"
@@ -131,15 +131,34 @@ class DevServerManagerActions {
                     value: "reload"
                 },
                 {
-                    title: "Start React devtools",
-                    value: "startReactDevTools"
-                }, 
-            ]);
-            if (value === "startReactDevTools") {
-                this.startReactDevToolsAsync();
-            } else {
+                    title: "Open React devtools",
+                    value: "openReactDevTools",
+                    action: this.openReactDevToolsAsync
+                }
+            ];
+            const pluginMenuItems = (await this.devServerManager.devtoolsPluginManager.queryPluginsAsync()).map((plugin)=>({
+                    title: _chalk.default`Open devtools plugin - {bold ${plugin.packageName}}`,
+                    value: `devtoolsPlugin:${plugin.packageName}`,
+                    action: async ()=>{
+                        const url = new URL(plugin.webpageEndpoint, this.devServerManager.getDefaultDevServer().getUrlCreator().constructUrl({
+                            scheme: "http"
+                        }));
+                        await (0, _open).openBrowserAsync(url.toString());
+                    }
+                })
+            );
+            const menuItems = [
+                ...defaultMenuItems,
+                ...pluginMenuItems
+            ];
+            const value = await (0, _prompts).selectAsync(_chalk.default`Dev tools {dim (native only)}`, menuItems);
+            const menuItem = menuItems.find((item)=>item.value === value
+            );
+            if (menuItem == null ? void 0 : menuItem.action) {
+                menuItem.action();
+            } else if (menuItem == null ? void 0 : menuItem.value) {
                 this.devServerManager.broadcastMessage("sendDevCommand", {
-                    name: value
+                    name: menuItem.value
                 });
             }
         } catch (error) {
@@ -149,7 +168,7 @@ class DevServerManagerActions {
             (0, _commandsTable).printHelp();
         }
     }
-    async startReactDevToolsAsync() {
+    async openReactDevToolsAsync() {
         await (0, _reactDevToolsProxy).startReactDevToolsProxyAsync();
         const url = this.devServerManager.getDefaultDevServer().getReactDevToolsUrl();
         await (0, _open).openBrowserAsync(url);
diff --git a/node_modules/@expo/cli/build/src/start/server/BundlerDevServer.js b/node_modules/@expo/cli/build/src/start/server/BundlerDevServer.js
index 0982d1d..d34619b 100644
--- a/node_modules/@expo/cli/build/src/start/server/BundlerDevServer.js
+++ b/node_modules/@expo/cli/build/src/start/server/BundlerDevServer.js
@@ -4,6 +4,7 @@ Object.defineProperty(exports, "__esModule", {
 });
 var _assert = _interopRequireDefault(require("assert"));
 var _resolveFrom = _interopRequireDefault(require("resolve-from"));
+var _devToolsPluginManager = _interopRequireDefault(require("./DevToolsPluginManager"));
 var Log = _interopRequireWildcard(require("../../log"));
 var _fileNotifier = require("../../utils/FileNotifier");
 var _delay = require("../../utils/delay");
@@ -51,16 +52,19 @@ const MIDDLEWARES = {
     "expo-updates": ()=>require("./middleware/ExpoGoManifestHandlerMiddleware").ExpoGoManifestHandlerMiddleware
 };
 class BundlerDevServer {
-    constructor(projectRoot, platformBundlers, isDevClient){
+    constructor(projectRoot, platformBundlers, /** Advanced options */ options){
         this.projectRoot = projectRoot;
         this.platformBundlers = platformBundlers;
-        this.isDevClient = isDevClient;
         this.ngrok = null;
         this.devSession = null;
         this.instance = null;
         this.platformManagers = {};
         this.urlCreator = null;
         this.notifier = null;
+        var ref;
+        this.devToolsPluginManager = (ref = options == null ? void 0 : options.devToolsPluginManager) != null ? ref : new _devToolsPluginManager.default(projectRoot);
+        var ref1;
+        this.isDevClient = (ref1 = options == null ? void 0 : options.isDevClient) != null ? ref1 : false;
     }
     setInstance(instance) {
         this.instance = instance;
@@ -157,8 +161,8 @@ class BundlerDevServer {
     async startDevSessionAsync() {
         var // This is used to make Expo Go open the project in either Expo Go, or the web browser.
         // Must come after ngrok (`startTunnelAsync`) setup.
-        ref1;
-        (ref1 = this.devSession) == null ? void 0 : ref1.stopNotifying == null ? void 0 : ref1.stopNotifying();
+        ref2;
+        (ref2 = this.devSession) == null ? void 0 : ref2.stopNotifying == null ? void 0 : ref2.stopNotifying();
         this.devSession = new _developmentSession.DevelopmentSession(this.projectRoot, // This URL will be used on external devices so the computer IP won't be relevant.
         this.isTargetingNative() ? this.getNativeRuntimeUrl() : this.getDevServerUrl({
             hostType: "localhost"
@@ -202,12 +206,12 @@ class BundlerDevServer {
     }
     /** Stop the running dev server instance. */ async stopAsync() {
         var // Stop file watching.
-        ref4, ref2, ref3;
-        (ref4 = this.notifier) == null ? void 0 : ref4.stopObserving();
+        ref5, ref3, ref4;
+        (ref5 = this.notifier) == null ? void 0 : ref5.stopObserving();
         // Stop the dev session timer and tell Expo API to remove dev session.
-        await ((ref2 = this.devSession) == null ? void 0 : ref2.closeAsync());
+        await ((ref3 = this.devSession) == null ? void 0 : ref3.closeAsync());
         // Stop ngrok if running.
-        await ((ref3 = this.ngrok) == null ? void 0 : ref3.stopAsync().catch((e)=>{
+        await ((ref4 = this.ngrok) == null ? void 0 : ref4.stopAsync().catch((e)=>{
             Log.error(`Error stopping ngrok:`);
             Log.exception(e);
         }));
@@ -277,8 +281,8 @@ class BundlerDevServer {
     }
     /** Get the tunnel URL from ngrok. */ getTunnelUrl() {
         var ref;
-        var ref5;
-        return (ref5 = (ref = this.ngrok) == null ? void 0 : ref.getActiveUrl()) != null ? ref5 : null;
+        var ref6;
+        return (ref6 = (ref = this.ngrok) == null ? void 0 : ref.getActiveUrl()) != null ? ref6 : null;
     }
     /** Open the dev server in a runtime. */ async openPlatformAsync(launchTarget, resolver = {}) {
         if (launchTarget === "desktop") {
diff --git a/node_modules/@expo/cli/build/src/start/server/DevServerManager.js b/node_modules/@expo/cli/build/src/start/server/DevServerManager.js
index b72620a..25dba2e 100644
--- a/node_modules/@expo/cli/build/src/start/server/DevServerManager.js
+++ b/node_modules/@expo/cli/build/src/start/server/DevServerManager.js
@@ -5,6 +5,7 @@ Object.defineProperty(exports, "__esModule", {
 var _config = require("@expo/config");
 var _assert = _interopRequireDefault(require("assert"));
 var _chalk = _interopRequireDefault(require("chalk"));
+var _devToolsPluginManager = _interopRequireDefault(require("./DevToolsPluginManager"));
 var _log = require("../../log");
 var _fileNotifier = require("../../utils/FileNotifier");
 var _rudderstackClient = require("../../utils/analytics/rudderstackClient");
@@ -55,6 +56,7 @@ class DevServerManager {
         this.projectPrerequisites = [];
         this.notifier = null;
         this.notifier = this.watchBabelConfig();
+        this.devtoolsPluginManager = new _devToolsPluginManager.default(projectRoot);
     }
     watchBabelConfig() {
         const notifier = new _fileNotifier.FileNotifier(this.projectRoot, [
@@ -158,7 +160,10 @@ class DevServerManager {
         // Start all dev servers...
         for (const { type , options  } of startOptions){
             const BundlerDevServerClass = await BUNDLERS[type]();
-            const server = new BundlerDevServerClass(this.projectRoot, platformBundlers, !!(options == null ? void 0 : options.devClient));
+            const server = new BundlerDevServerClass(this.projectRoot, platformBundlers, {
+                devToolsPluginManager: this.devtoolsPluginManager,
+                isDevClient: !!(options == null ? void 0 : options.devClient)
+            });
             await server.startAsync(options != null ? options : this.options);
             devServers.push(server);
         }
diff --git a/node_modules/@expo/cli/build/src/start/server/DevToolsPluginManager.js b/node_modules/@expo/cli/build/src/start/server/DevToolsPluginManager.js
new file mode 100644
index 0000000..e39e3eb
--- /dev/null
+++ b/node_modules/@expo/cli/build/src/start/server/DevToolsPluginManager.js
@@ -0,0 +1,63 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", {
+    value: true
+});
+exports.DevToolsPluginEndpoint = exports.default = void 0;
+var _path = _interopRequireDefault(require("path"));
+var _resolveFrom = _interopRequireDefault(require("resolve-from"));
+class DevToolsPluginManager {
+    constructor(projectRoot){
+        this.projectRoot = projectRoot;
+        this.plugins = null;
+    }
+    async queryPluginsAsync() {
+        if (this.plugins) {
+            return this.plugins;
+        }
+        const plugins = (await this.queryAutolinkedPluginsAsync(this.projectRoot)).map((plugin)=>({
+                ...plugin,
+                webpageEndpoint: `${DevToolsPluginEndpoint}/${plugin.packageName}`
+            })
+        );
+        this.plugins = plugins;
+        return this.plugins;
+    }
+    async queryPluginWebpageRootAsync(pluginName) {
+        const plugins = await this.queryPluginsAsync();
+        const plugin = plugins.find((p)=>p.packageName === pluginName
+        );
+        var ref;
+        return (ref = plugin == null ? void 0 : plugin.webpageRoot) != null ? ref : null;
+    }
+    async queryAutolinkedPluginsAsync(projectRoot) {
+        const expoPackagePath = _resolveFrom.default.silent(projectRoot, "expo/package.json");
+        if (!expoPackagePath) {
+            return [];
+        }
+        const resolvedPath = _resolveFrom.default.silent(_path.default.dirname(expoPackagePath), "expo-modules-autolinking/exports");
+        if (!resolvedPath) {
+            return [];
+        }
+        const autolinkingModule = require(resolvedPath);
+        if (!autolinkingModule.queryAutolinkingModulesFromProjectAsync) {
+            throw new Error("Missing exported `queryAutolinkingModulesFromProjectAsync()` function from `expo-modules-autolinking`");
+        }
+        const plugins = await autolinkingModule.queryAutolinkingModulesFromProjectAsync(projectRoot, {
+            platform: "devtools",
+            onlyProjectDeps: false
+        });
+        debug("Found autolinked plugins", this.plugins);
+        return plugins;
+    }
+}
+exports.default = DevToolsPluginManager;
+function _interopRequireDefault(obj) {
+    return obj && obj.__esModule ? obj : {
+        default: obj
+    };
+}
+const debug = require("debug")("expo:start:server:devtools");
+const DevToolsPluginEndpoint = "/_expo/plugins";
+exports.DevToolsPluginEndpoint = DevToolsPluginEndpoint;
+
+//# sourceMappingURL=DevToolsPluginManager.js.map
\ No newline at end of file
diff --git a/node_modules/@expo/cli/build/src/start/server/metro/MetroBundlerDevServer.js b/node_modules/@expo/cli/build/src/start/server/metro/MetroBundlerDevServer.js
index 0813aea..6339209 100644
--- a/node_modules/@expo/cli/build/src/start/server/metro/MetroBundlerDevServer.js
+++ b/node_modules/@expo/cli/build/src/start/server/metro/MetroBundlerDevServer.js
@@ -18,6 +18,7 @@ var _bundlerDevServer = require("../BundlerDevServer");
 var _getStaticRenderFunctions = require("../getStaticRenderFunctions");
 var _contextModuleSourceMapsMiddleware = require("../middleware/ContextModuleSourceMapsMiddleware");
 var _createFileMiddleware = require("../middleware/CreateFileMiddleware");
+var _devToolsPluginMiddleware = require("../middleware/DevToolsPluginMiddleware");
 var _faviconMiddleware = require("../middleware/FaviconMiddleware");
 var _historyFallbackMiddleware = require("../middleware/HistoryFallbackMiddleware");
 var _interstitialPageMiddleware = require("../middleware/InterstitialPageMiddleware");
@@ -247,6 +248,7 @@ class MetroBundlerDevServer extends _bundlerDevServer.BundlerDevServer {
             scheme: (_scheme = options.location.scheme) != null ? _scheme : null
         }).getHandler());
         middleware.use(new _reactDevToolsPageMiddleware.ReactDevToolsPageMiddleware(this.projectRoot).getHandler());
+        middleware.use(new _devToolsPluginMiddleware.DevToolsPluginMiddleware(this.projectRoot, this.devToolsPluginManager).getHandler());
         const deepLinkMiddleware = new _runtimeRedirectMiddleware.RuntimeRedirectMiddleware(this.projectRoot, {
             onDeepLink: getDeepLinkHandler(this.projectRoot),
             getLocation: ({ runtime  })=>{
diff --git a/node_modules/@expo/cli/build/src/start/server/middleware/DevToolsPluginMiddleware.js b/node_modules/@expo/cli/build/src/start/server/middleware/DevToolsPluginMiddleware.js
new file mode 100644
index 0000000..4e4707d
--- /dev/null
+++ b/node_modules/@expo/cli/build/src/start/server/middleware/DevToolsPluginMiddleware.js
@@ -0,0 +1,61 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", {
+    value: true
+});
+Object.defineProperty(exports, "DevToolsPluginEndpoint", {
+    enumerable: true,
+    get: function() {
+        return _devToolsPluginManager.DevToolsPluginEndpoint;
+    }
+});
+var _assert = _interopRequireDefault(require("assert"));
+var _send = _interopRequireDefault(require("send"));
+var _expoMiddleware = require("./ExpoMiddleware");
+var _devToolsPluginManager = require("../DevToolsPluginManager");
+function _interopRequireDefault(obj) {
+    return obj && obj.__esModule ? obj : {
+        default: obj
+    };
+}
+class DevToolsPluginMiddleware extends _expoMiddleware.ExpoMiddleware {
+    constructor(projectRoot, pluginManager){
+        super(projectRoot, [
+            _devToolsPluginManager.DevToolsPluginEndpoint
+        ]);
+        this.pluginManager = pluginManager;
+    }
+    shouldHandleRequest(req) {
+        var ref;
+        if (!((ref = req.url) == null ? void 0 : ref.startsWith(_devToolsPluginManager.DevToolsPluginEndpoint))) {
+            return false;
+        }
+        return true;
+    }
+    async handleRequestAsync(req, res) {
+        (0, _assert).default(req.headers.host, "Request headers must include host");
+        var _url;
+        const { pathname  } = new URL((_url = req.url) != null ? _url : "/", `http://${req.headers.host}`);
+        const pluginName = this.queryPossiblePluginName(pathname.substring(_devToolsPluginManager.DevToolsPluginEndpoint.length + 1));
+        const webpageRoot = await this.pluginManager.queryPluginWebpageRootAsync(pluginName);
+        if (!webpageRoot) {
+            res.statusCode = 404;
+            res.end();
+            return;
+        }
+        const pathInPluginRoot = pathname.substring(_devToolsPluginManager.DevToolsPluginEndpoint.length + pluginName.length + 1) || "/";
+        (0, _send).default(req, pathInPluginRoot, {
+            root: webpageRoot
+        }).pipe(res);
+    }
+    queryPossiblePluginName(pathname) {
+        const parts = pathname.split("/");
+        if (parts[0][0] === "@" && parts.length > 1) {
+            // Scoped package name
+            return `${parts[0]}/${parts[1]}`;
+        }
+        return parts[0];
+    }
+}
+exports.DevToolsPluginMiddleware = DevToolsPluginMiddleware;
+
+//# sourceMappingURL=DevToolsPluginMiddleware.js.map
\ No newline at end of file
diff --git a/node_modules/@expo/cli/build/src/start/server/middleware/ExpoMiddleware.js b/node_modules/@expo/cli/build/src/start/server/middleware/ExpoMiddleware.js
index 9babae5..05139d9 100644
--- a/node_modules/@expo/cli/build/src/start/server/middleware/ExpoMiddleware.js
+++ b/node_modules/@expo/cli/build/src/start/server/middleware/ExpoMiddleware.js
@@ -34,7 +34,7 @@ class ExpoMiddleware {
     /**
    * Returns true when the middleware should handle the incoming server request.
    * Exposed for testing.
-   */ _shouldHandleRequest(req) {
+   */ shouldHandleRequest(req) {
         if (!req.url) {
             return false;
         }
@@ -63,7 +63,7 @@ class ExpoMiddleware {
             }
         };
         const middleware = async (req, res, next)=>{
-            if (!this._shouldHandleRequest(req)) {
+            if (!this.shouldHandleRequest(req)) {
                 return next();
             }
             return internalMiddleware(req, res, next);
